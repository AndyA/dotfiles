#!/usr/bin/env -S uv run --script -q
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "humanize",
# ]
# ///

#!/usr/bin/env python3

import os
import argparse
import time
from datetime import datetime
from humanize import naturalsize, naturaltime

def parse_arguments():
    parser = argparse.ArgumentParser(description="Sort files by mtime, ctime, or size.")
    parser.add_argument('-a', action='store_true', help="Sort by atime (access time)")
    parser.add_argument('-c', action='store_true', help="Sort by ctime (change time)")
    parser.add_argument('-s', action='store_true', help="Sort by size")
    parser.add_argument('-H', action='store_true', help="Human-readable format")
    parser.add_argument('-r', action='store_true', help="Reverse sort order")
    parser.add_argument('dirs', nargs='*', default=['.'], help="Directories to scan")
    return parser.parse_args()

def get_file_info(path, column):
    try:
        stats = os.lstat(path)
        if column == 'size':
            return stats.st_size
        elif column == 'atime':
            return stats.st_atime
        elif column == 'ctime':
            return stats.st_ctime
        else:  # Default to mtime
            return stats.st_mtime
    except FileNotFoundError:
        return None

def format_value(value, human, size):
    if value is None:
        return '*' * 10
    if size:
        return naturalsize(value) if human else str(value)
    return naturaltime(datetime.fromtimestamp(value)) if human else time.ctime(value)

def main():
    args = parse_arguments()

    # Determine the column to sort by
    if args.a:
        column = 'atime'
    elif args.c:
        column = 'ctime'
    elif args.s:
        column = 'size'
    else:
        column = 'mtime'

    files = []
    for directory in args.dirs:
        for root, _, filenames in os.walk(directory):
            for filename in filenames:
                filepath = os.path.join(root, filename)
                value = get_file_info(filepath, column)
                files.append((value, filepath))

    # Sort files
    files.sort(key=lambda x: x[0], reverse=args.r)

    # Print results
    for value, filepath in files:
        print(f"{format_value(value, args.H, column == 'size'):>30} : {filepath}")

if __name__ == "__main__":
    main()

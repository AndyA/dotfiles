#!/usr/bin/env perl

use strict;
use warnings;

use File::Temp;
use File::chdir;
use Getopt::Long;
use Set::IntSpan::Fast;

# We need this to autodie system and it's listed explicitly here so we
# don't forget about it.
use IPC::System::Simple;

my $url     = undef;
my $verbose = 0;

GetOptions(
  'url:s' => \$url,
  'v'     => \$verbose
) or syntax();

$url ||= svn_info()->{URL} || die "Can't find repo URL\n";

if ( @ARGV ) {
  svn_patch( $url, @ARGV );
}
else {
  my %rev = ();
  while ( <> ) {
    $rev{$1}++ while /\[(\d+)\]/g;
  }
  svn_patch( $url, sort { $a <=> $b } keys %rev );
}

package Set::IntSpan::Fast;

sub lowest { ( shift->iterate_runs->() )[0] }

sub is_simple {
  my $self = shift;
  my $iter = $self->iterate_runs;
  $iter->() or return;
  $iter->() and return;
  return 1;
}

package main;

sub mention {
  return unless $verbose;
  print STDERR @_;
}

sub r {
  my ( $lo, $hi ) = @_;
  return "-r$lo" unless defined $hi;
  return "-r$lo:$hi";
}

sub svn_patch {
  my ( $url, @revs ) = @_;

  return unless @revs;
  my $set = Set::IntSpan::Fast->new;
  $set->add( @revs );

  use autodie qw( system );

  if ( $set->is_simple ) {
    my ( $lo, $hi ) = $set->iterate_runs->();
    system 'svn', 'diff', r( $lo - 1, $hi ), $url;
  }
  else {
    local $CWD = File::Temp->newdir;
    my $base_rev = $set->lowest - 1;
    mention( "Checking out $url\n" );
    system 'svn', 'checkout', '-q', r( $base_rev ), $url, '.';
    mention( "Applying patches\n" );
    my $iter = $set->iterate_runs;
    while ( my ( $lo, $hi ) = $iter->() ) {
      my $cmd = join ' ', 'svn', 'diff', r( $lo - 1, $hi ), '|',
       'patch', '-p0', '-ts';
      mention( "  $cmd\n" );
      system $cmd;
    }
    svn_addnew();
    system 'svn', 'diff';
  }
}

sub svn_addnew {
  my @add = ();
  with_cmd(
    'svn', 'st',
    sub {
      return unless /^\?\s+(.+)/;
      push @add, $1;
    }
  );
  if ( @add ) {
    mention( "Adding files created since first rev\n" );
    system 'svn', 'add', '-q', @add;
  }
}

sub tidy {
  my $s = shift;
  $s =~ s/^\s+//;
  $s =~ s/\s+$//;
  return $s;
}

sub with_cmd {
  my ( @cmd ) = @_;
  my $code = pop @cmd;
  my $cmd = join ' ', @cmd;
  open my $sh, '-|', @cmd or die "Can't $cmd ($!)\n";
  while ( <$sh> ) { chomp; $code->() }
  close $sh or warn "Can't $cmd ($!) -- at exit\n";
  return $?;
}

sub with_svn {
  my @cmd  = @_;
  my $code = pop @cmd;
  my $info = {};
  with_cmd(
    svn => @cmd,
    sub {
      return if /^\s*$/;
      my ( $k, $v ) = $code->();
      $k =~ s/\s+//g;
      $info->{$k} = $v;
    }
  );
  return $info;
}

sub svn_info {
  with_svn( info => @_, sub { map tidy( $_ ), split /:/, $_, 2 } );
}

sub syntax {
  print STDERR <<EOT;
Syntax: svn-revpatch [ --url <repo-url> ] [ <rev> ... ]
EOT
  exit( 1 );
}

# vim:ts=2:sw=2:sts=2:et:ft=perl


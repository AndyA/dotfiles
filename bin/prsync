#!/usr/bin/env perl

use v5.10;

use autodie;
use strict;
use warnings;

use File::Temp;
use Path::Class;

my @args = ();
my %opts = ( parallel => 10 );

parse_args(@ARGV);
my $todo   = make_chunks( $opts{parallel}, get_files(@args) );
my $dir    = File::Temp->newdir;
my @chunks = write_chunks( $dir, $todo );

{
  my @cmd = (
    'parallel',
    -j => $opts{parallel},
    '-t', '--verbose', '--progress', 'rsync', "--files-from={}", @args
  );
  open my $ch, '|-', @cmd;
  print $ch "$_\n" for @chunks;
  close $ch;
}

sub parse_args {
  my @argv = @_;
  while (@argv) {
    my $arg = shift @argv;
    if ( $arg =~ /^--(\w+)(.*)/ ) {
      my ( $opt, $val ) = ( $1, $2 );
      if ( exists $opts{$opt} ) {
        if ( $val =~ /^=(.*)/ ) {
          $opts{$opt} = $1;
          next;
        }

        die "Bad option: $arg"
         if length $val;
        die "Missing value for --$opt"
         unless @argv;

        $opts{$opt} = shift @argv;
        next;
      }
    }
    push @args, $arg;
  }
}

sub get_files {
  my @args = @_;
  my @cmd
   = ( 'rsync', @args, '--out-format=%l %n', '--no-v', '--dry-run' );
  my @files = ();
  open my $fh, '-|', @cmd;
  while (<$fh>) {
    chomp;
    my ( $size, $name ) = split /\s+/, $_, 2;
    next if $size eq 'receiving';
    next if $name =~ m{/$};
    push @files, { size => $size, name => $name };
  }
  close $fh;
  return @files;
}

sub make_chunks {
  my ( $chunks, @todo ) = @_;
  my %todo = ();
  my @by_size = map { { size => 0, chunk => $_ } } 1 .. $chunks;
  for my $obj ( sort { $b->{size} <=> $a->{size} } @todo ) {
    @by_size = sort { $a->{size} <=> $b->{size} } @by_size;
    $by_size[0]{size} += $obj->{size};
    push @{ $todo{ $by_size[0]{chunk} } }, $obj->{name};
  }
  @$_ = sort { $a cmp $b } @$_ for values %todo;
  return \%todo;
}

sub write_chunks {
  my ( $dir, $todo ) = @_;

  my @chunks = ();
  while ( my ( $chunk, $list ) = each %$todo ) {
    my $cf = file $dir, "chunk.$chunk";
    push @chunks, $cf;
    my $fh = $cf->openw;
    print $fh "$_\n" for @$list;
  }
  return @chunks;
}

# vim:ts=2:sw=2:sts=2:et:ft=perl


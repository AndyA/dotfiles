#!/usr/bin/env perl

use v5.10;

use autodie;
use strict;
use warnings;

use DBI;
use Getopt::Long;
use JSON;
use PHP::Serialization qw( serialize unserialize );
use Path::Class;
use Scalar::Util qw( blessed );
use String::ShellQuote;
use Sys::Hostname;

use constant USAGE => <<EOT;
Usage: $0 [<options>] <verb> ...

Options:
  -c <config.json>  Config file to use (default is config.json)

Verbs:
  load              Load the database
  save              Save the database

EOT

my %O = ( config => "config.json" );

GetOptions( 'c|config:s' => \$O{config} ) or die USAGE;
@ARGV >= 1 || die USAGE;

my $C = load_config( $O{config} );

my ( $verb, @args ) = @ARGV;

if ( $verb eq "load" ) {
  create_db( $C->{db} );
  my %tables = map { $_ => 1 } get_tables( $C->{db} );
  my $sqldir = dir( $C->{dirs}{sql} );
  my @sql    = grep !/\.tmp\.sql$/, grep /\.sql$/, $sqldir->children;
  unless (@sql) {
    say "No sql files found in $sqldir";
    exit;
  }

  my %replace = ();
  my $here_base = $C->{base} // die "No base URL defined";
  for my $base ( get_bases($C) ) {
    $replace{$base} = $here_base;
  }

  for my $sql (@sql) {
    ( my $tbl = $sql->basename ) =~ s/\.sql$//;
    say "Loading $sql into $tbl";
    if (%replace) {
      my $tmp = file $sqldir, "$tbl.tmp.sql";
      fixup( $sql, $tmp, %replace );
      load_table( $tmp, $C->{db} );
      $tmp->remove;
    }
    else {
      load_table( $sql, $C->{db} );
    }
    delete $tables{$tbl};
  }
  if ( keys %tables ) {
    my @orphan = sort keys %tables;
    say "Deleting orphan tables: ", join ", ", @orphan;
    my $dbh = dbh( $C->{db} );
    $dbh->do("DROP TABLE `$_`") for @orphan;
    $dbh->disconnect;
  }
}
elsif ( $verb eq "save" ) {
  my @tables = get_tables( $C->{db} );

  my %replace = ();
  my ( $canonical, @extra ) = get_canonical($C);
  die "Multiple canonical hosts" if @extra;

  if ( defined $canonical ) {
    for my $base ( get_bases($C) ) {
      $replace{$base} = $canonical;
    }
  }

  for my $tbl (@tables) {
    my $sql = file $C->{dirs}{sql} // "sql", "$tbl.sql";
    my $tmp = file $C->{dirs}{sql} // "sql", "$tbl.tmp.sql";
    $sql->parent->mkpath;
    say "Dumping $tbl to $sql";
    my @cmd = (
      'mysqldump',
      '--skip-extended-insert', '--skip-dump-date', '--skip-comments',
      -u => $C->{db}{user},
      -h => $C->{db}{host},
      ( length $C->{db}{pass} ? ( -p => $C->{db}{pass} ) : () ),
      '--result-file' => $tmp,
      $C->{db}{database}, $tbl
    );

    system @cmd;

    if (%replace) {
      my $tmp2 = file $C->{dirs}{sql} // "sql", "$tbl.tmp2.sql";
      fixup( $tmp, $tmp2, %replace );
      rename $tmp2, $sql;
      $tmp->remove;
    }
    else {
      rename $tmp, $sql;
    }
  }
}
else {
  die USAGE;
}

sub load_table {
  my ( $sql, $conn ) = @_;
  my $cmd = join " < ",
   shell_quote(
    'mysql',
    -u => $conn->{user},
    -h => $conn->{host},
    ( length $conn->{pass} ? ( -p => $conn->{pass} ) : () ),
    $conn->{database},
   ), $sql;
  system $cmd;
}

sub get_tables {
  my $conn   = shift;
  my $dbh    = dbh($conn);
  my @tables = @{ $dbh->selectcol_arrayref("SHOW TABLES") };
  $dbh->disconnect();
  return @tables;
}

sub create_db {
  my $conn = { %{ $_[0] } };
  my $db   = delete $conn->{database} // die "No database named";
  my $dbh  = dbh($conn);
  $dbh->do("CREATE DATABASE IF NOT EXISTS `$db`");
  $dbh->disconnect();
}

sub get_bases {
  my $conf = shift;
  return grep { defined }
   map { $_->{base} } values %{ $conf->{site} // {} };
}

sub get_canonical {
  my $conf = shift;
  return grep { defined }
   map        { $_->{base} }
   grep { $_->{canonical} } values %{ $conf->{site} // {} };
}

sub merge {
  my ( $a, $b ) = @_;

  return $a unless defined $b;
  return $b
   unless ref $a
   && ref $b
   && ref $a eq 'HASH'
   && ref $b eq 'HASH';

  my %k = map { $_ => 1 } keys %$a;
  $k{$_}++ for keys %$b;

  my $out = {};
  for my $key ( keys %k ) {
    $out->{$key} = merge( $a->{$key}, $b->{$key} );
  }
  return $out;
}

sub load_config {
  my $file = shift;
  my $host = short_hostname(shift);

  say "Loading config from $host from $file";
  my $conf = JSON->new->decode( scalar file($file)->slurp );
  my $site = $conf->{site} // {};

  unless ( exists $site->{$host} ) {
    say "No custom config for $host";
    return $conf;
  }

  say "Merging in local config for $host";
  return merge( $conf, $site->{$host} );
}

sub short_hostname {
  ( my $host = shift // hostname ) =~ s/\..*//;
  return $host;
}

sub fixup {
  my ( $in, $out, %replace ) = @_;

  my %UNESC = (
    '\\0'  => "\0",
    '\\"'  => '"',
    "\\'"  => "'",
    '\\b'  => "\b",
    '\\n'  => "\n",
    '\\r'  => "\r",
    '\\t'  => "\t",
    '\\\\' => '\\',
  );

  my $escape   = mk_encoder( reverse %UNESC );
  my $unescape = mk_encoder(%UNESC);
  my $matcher  = mk_matcher( keys %replace );
  my $fixer    = mk_fixer( $matcher, %replace );
  my $vfixer   = mk_value_fixer( $matcher, $fixer, $escape, $unescape );

  my $hin  = file($in)->openr;
  my $hout = file($out)->openw;

  while (<$hin>) {
    chomp( my $ln = $_ );
    $ln =~ s/'((?:\\.|[^'\\]*)*)'/"'" . $vfixer->($1) . "'"/eg
     if %replace;
    $hout->print("$ln\n");
  }
}

sub mk_value_fixer {
  my ( $matcher, $fixer, $escape, $unescape ) = @_;
  return sub {
    my $v  = shift;
    my $vv = $unescape->($v);
    return $v unless $vv =~ $matcher;
    my $ds = eval { unserialize $vv };
    if ($@) {
      $vv = $fixer->($vv);
    }
    else {
      $vv = serialize( walk( $ds, $fixer ) );
    }

    return $escape->($vv);
  };
}

sub mk_fixer {
  my ( $matcher, %replace ) = @_;

  return sub {
    my $str = shift;
    $str =~ s/$matcher/$replace{$1}/eg;
    return $str;
  };
}

sub mk_encoder {
  my %kv = @_;
  my $m  = mk_matcher( keys %kv );
  return sub {
    my $str = shift;
    $str =~ s/$m/$kv{$1}/eg;
    return $str;
  };
}

sub mk_matcher {
  my $pat = join '|', map quotemeta, sort @_;
  return qr{($pat)};
}

sub unbless {
  my $obj = shift;
  return $obj unless defined $obj && blessed $obj;
  return {%$obj} if UNIVERSAL::isa( $obj, 'HASH' );
  return [@$obj] if UNIVERSAL::isa( $obj, 'ARRAY' );
  die;
}

sub walk {
  my ( $ds, $fixer ) = @_;
  return undef unless defined $ds;
  if ( my $pkg = blessed $ds ) {
    return bless walk( unbless($ds), $fixer ), $pkg;
  }
  if ( ref $ds ) {
    if ( 'HASH' eq ref $ds ) {
      return { map { $_ => walk( $ds->{$_}, $fixer ) } keys %$ds };
    }
    elsif ( 'ARRAY' eq ref $ds ) {
      return [map { walk( $_, $fixer ) } @$ds];
    }
    else { die Dumper($ds); }
  }
  else {
    return $fixer->($ds);
  }
}

sub dbh {
  my $db   = shift;
  my %dbc  = %$db;
  my $user = delete $dbc{user};
  my $pass = delete $dbc{pass};
  my $args = join ";", map { "$_=$dbc{$_}" } sort keys %dbc;
  return DBI->connect( "DBI:mysql:$args", $user, $pass,
    { mysql_enable_utf8 => 1, RaiseError => 1 } );
}

# vim:ts=2:sw=2:sts=2:et:ft=perl


#!/usr/bin/env -S uv run -q --script
# /// script
# requires-python = ">=3.13"
# dependencies = []
# ///

import argparse
import os
import sys
from collections import defaultdict
from pathlib import Path

USAGE = """
Syntax: gopro_ls.py [options] <dir> ...

Finds all of the GOPROxxxx and GPyyxxxx files in the named directories
and lists them in the correct order.

Use the -r (or -d) options to rename the files in a more friendly style.

Options:
    -h, --help              Display this text
    -r, --rename            Rename files as "GoPro-xxxx-yyyy"
    -d, --dirs              Rename files into dirs "GoPro-xxxx"
    -p, --prefix=<prefix>   Prefix to use instead of "GoPro"
        --ffmpeg            Output ffmpeg "concat" format file
    -n, --dryrun            Don't change anything
"""


def parse_args():
    parser = argparse.ArgumentParser(description="Process GoPro files.", add_help=False)
    parser.add_argument("dirs", nargs="*", default=["."], help="Directories to process")
    parser.add_argument("-r", "--rename", action="store_true", help="Rename files")
    parser.add_argument(
        "-d", "--dirs", action="store_true", help="Rename files into directories"
    )
    parser.add_argument(
        "-p", "--prefix", default="GoPro", help="Prefix to use instead of 'GoPro'"
    )
    parser.add_argument(
        "--ffmpeg", action="store_true", help="Output ffmpeg 'concat' format file"
    )
    parser.add_argument(
        "-n", "--dryrun", action="store_true", help="Don't change anything"
    )
    parser.add_argument("-h", "--help", action="store_true", help="Display help text")
    return parser.parse_args()


def find_files(dirs):
    by_dir = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
    for dir in dirs:
        for root, _, files in os.walk(dir):
            for file in files:
                if not file.startswith(".") and (
                    "GOPR" in file or file.startswith("GP")
                ):
                    seq = file[4:8] if "GOPR" in file else file[2:6]
                    name = Path(file).stem
                    by_dir[root][seq][name].append(Path(root) / file)
    return by_dir


def nice_name(prefix, seq):
    return f"{prefix}-{seq}"


def with_files(by_dir, callback):
    for dir, seqs in sorted(by_dir.items()):
        for seq, names in sorted(seqs.items()):
            for name, vids in sorted(names.items()):
                callback(dir, seq, name, vids)


def main():
    args = parse_args()
    if args.help:
        print(USAGE)
        sys.exit(0)

    by_dir = find_files(args.dirs)

    if args.rename or args.dirs:
        idx_for_seq = defaultdict(int)

        def rename_callback(dir, seq, name, vids):
            nonlocal idx_for_seq
            idx_for_seq[seq] += 1
            nice = nice_name(args.prefix, seq)
            for vid in vids:
                ext = vid.suffix.lower()
                new_name = f"{nice}-{idx_for_seq[seq]:03d}{ext}"
                if args.dirs:
                    new_name = f"{nice}/{new_name}"
                new_vid = Path(dir) / new_name
                print(f"{vid} --> {new_vid}")
                if not args.dryrun:
                    new_vid.parent.mkdir(parents=True, exist_ok=True)
                    vid.rename(new_vid)

        with_files(by_dir, rename_callback)
    else:

        def list_callback(dir, seq, name, vids):
            if args.ffmpeg:
                for vid in sorted(vids):
                    if vid.suffix.lower() == ".mp4":
                        print(f"file '{vid}'")
            else:
                for vid in sorted(vids):
                    print(vid)

        with_files(by_dir, list_callback)


if __name__ == "__main__":
    main()

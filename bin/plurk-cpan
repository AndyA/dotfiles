#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use Data::Dumper;
use HTTP::Date;
use LWP::Simple;
use Net::XMPP;
use RDF::Simple::Parser;
use WWW::Plurk;
use Storable;

$| = 1;

my $LATEST = 'http://search.cpan.org/uploads.rdf';
my $STORE  = glob '~/plurk-cpan.store';

my %EXTRACT = (
    'http://purl.org/rss/1.0/title'           => 'title',
    'http://purl.org/rss/1.0/link'            => 'link',
    'http://purl.org/rss/1.0/description'     => 'description',
    'http://purl.org/dc/elements/1.1/creator' => 'creator',
    'http://purl.org/dc/elements/1.1/date'    => 'date',
);

my $feed    = LWP::Simple::get( $LATEST );
my $parser  = RDF::Simple::Parser->new( base => $LATEST );
my @triples = $parser->parse_rdf( $feed );

my $prev = -f $STORE ? retrieve( $STORE ) : {};
my $dir = {};

for my $tri ( @triples ) {
    my ( $key, $type, $value ) = @$tri;
    if ( my $field = $EXTRACT{$type} ) {
        $dir->{$key}{$field} = $value;
    }
}

my @keys = map { $_->[0] }
  sort { $a->[1] <=> $b->[1] }
  grep { defined $_->[1] }
  map { [ $_, str2time( $dir->{$_}->{date} ) ] } keys %$dir;

for my $key ( @keys ) {
    next if exists $prev->{$key};
    my $dist = $dir->{$key};
    next if $dist->{title} eq 'search.cpan.org';    # Shite
    my $desc = $dist->{title} . ' by ' . $dist->{creator} . "\n$key";
    update( $desc );
}

store( $dir, $STORE );

{
    my $plurk;

    sub update {
        my $msg = shift;

        print "$msg\n";

        POST: {
            $plurk ||= WWW::Plurk->new( 'cpan', 'crabcrab' );
            eval { $plurk->add_plurk( content => $msg ) };

            if ( my $error = $@ ) {
                $error =~ s/\s+at\s+\S+\s+line\s+\d+\s*//;
                print "Plurk failed ($error), sleeping for five minutes\n";
                sleep 60 * 5;
                redo POST;
                print "Retry $msg\n";
            }

            sleep 60;
        }
    }
}

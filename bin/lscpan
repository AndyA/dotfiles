#!/usr/bin/env perl

use strict;
use warnings;

use File::Spec;
use Getopt::Long;

GetOptions() or die syntax();

my $cmd = shift or die syntax();
my $handler = 'cmd_' . lc $cmd;
if ( my $h = __PACKAGE__->can( $handler ) ) {
  $h->( @ARGV );
}
else {
  die "Unknown command: $cmd\n";
}

sub cmd_help {
  print syntax();
}

sub cmd_like {
  my $match = join '|', map "(?:$_)", @_;
  my $meta = meta();
  for my $mod ( sort keys %{ $meta->{m} } ) {
    # TODO verbose &c
    print "$mod\n" if $mod =~ /$match/o;
  }
}

{
  my $Meta;

  sub meta {
    $Meta ||= read_meta(
      File::Spec->catfile(
        (
          find_dot_cpan()
           or die "Can't find your .cpan directory\n"
        ),
        'sources',
        'modules',
        '02packages.details.txt.gz'
      )
    );
  }
}

sub syntax {
  <<EOT
Syntax: lscpan cmd args

Commands:

  like    lscan like Test::.+   List matching module names

EOT
}

sub read_meta {
  my $details    = shift;
  my $by_module  = {};
  my $by_package = {};

  read_packages(
    $details,
    sub {
      my ( $mod, $ver, $dist ) = @_;
      $by_module->{$mod} = [ $ver, $dist ];
      $by_package->{$dist}{$mod} = $ver;
    }
  );
  return {
    m => $by_module,
    p => $by_package,
  };
}

sub read_packages {
  my ( $details, $cb ) = @_;
  -e $details or die "$details not found\n";
  open my $dh, '-|', 'gzip', '-cd', $details
   or die "Can't expand $details\n";
  while ( <$dh> ) {
    chomp;
    if ( /^\s*$/ .. 0 ) {
      next if /^\s*$/;
      my ( $mod, $ver, $dist ) = split /\s+/;
      $cb->( $mod, $ver, $dist );
    }
  }
}

sub find_dot_cpan { glob '~/.cpan' }

# vim:ts=2:sw=2:sts=2:et:ft=perl


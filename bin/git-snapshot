#!/usr/bin/env perl

use strict;
use warnings;

use constant CMD_BATCH => 50;

sub with_cmd(@);
sub do_cmd(@);
sub with_status(&);

my %ACTION = (
  '?' => cmd_feeder( git => 'add' ),
  'D' => cmd_feeder( git => 'rm' ),
);

with_status {
  my @f = @_;
  if ( my $act = $ACTION{ $f[1] } ) {
    $act->( $f[2] );
  }
};
$_->( undef ) for values %ACTION; # flush

sub with_status(&) {
  my $cb = shift;
  with_cmd git => status => '--porcelain',
   sub {
    my $ln = shift;
    next unless my @f = $ln =~ /^(.)(.) (.*)/;
    $cb->( @f );
   };
}

sub cmd_feeder {
  my @cmd    = @_;
  my @arg    = ();
  my $commit = sub {
    do_cmd @cmd, @arg if @arg;
    @arg = ();
  };
  return sub {
    for my $a ( @_ ) {
      push @arg, $a if defined $a;
      $commit->() if @arg > CMD_BATCH || !defined $a;
    }
  };
}

sub do_cmd(@) {
  my @cmd = @_;
  my $cmd = join ' ', @cmd;
  print "$cmd\n";
  system @cmd and die "$cmd failed: $?\n";
}

sub with_cmd(@) {
  my @cmd = @_;
  my $cmd = join ' ', @cmd;
  my $cb  = pop @cmd;
  open my $fh, '-|', @cmd or die "Can't run $cmd: $!\n";
  while ( <$fh> ) {
    chomp( my $ln = $_ );
    $cb->( $ln );
  }
  close $fh or die "Command $cmd failed: $?\n";
}

# vim:ts=2:sw=2:sts=2:et:ft=perl


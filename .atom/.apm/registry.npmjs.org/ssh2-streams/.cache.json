{"_id":"ssh2-streams","_rev":"24-fb1d1cfddfe4c0dc6d5685afd0093417","name":"ssh2-streams","description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","dist-tags":{"latest":"0.0.14"},"versions":{"0.0.1":{"name":"ssh2-streams","version":"0.0.1","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.1","_shasum":"35c1d2ea609e1cf8fd927367a4e037b63f50d017","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.1","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.1","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"35c1d2ea609e1cf8fd927367a4e037b63f50d017","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.1.tgz"},"directories":{}},"0.0.2":{"name":"ssh2-streams","version":"0.0.2","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.2","_shasum":"9ef23b323407b9310336878d9a4b9c2e81b53dd2","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.2","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.2","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"9ef23b323407b9310336878d9a4b9c2e81b53dd2","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.2.tgz"},"directories":{}},"0.0.3":{"name":"ssh2-streams","version":"0.0.3","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.3","_shasum":"11eeff50dcaaac15321f626583c039e50a3f94df","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.3","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.3","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"11eeff50dcaaac15321f626583c039e50a3f94df","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.3.tgz"},"directories":{}},"0.0.4":{"name":"ssh2-streams","version":"0.0.4","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.4","_shasum":"3636cdff7699b1a2740fed55854b65b44fe6b65e","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.4","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.4","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"3636cdff7699b1a2740fed55854b65b44fe6b65e","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.4.tgz"},"directories":{}},"0.0.5":{"name":"ssh2-streams","version":"0.0.5","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.5","_shasum":"23f1c289ceef38bd51286af42c3de34807e585dc","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.5","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.5","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"23f1c289ceef38bd51286af42c3de34807e585dc","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.5.tgz"},"directories":{}},"0.0.6":{"name":"ssh2-streams","version":"0.0.6","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.6","_shasum":"1b29740cee4b32d1f253c3f6ad3470800edb9205","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.6","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.6","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"1b29740cee4b32d1f253c3f6ad3470800edb9205","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.6.tgz"},"directories":{}},"0.0.7":{"name":"ssh2-streams","version":"0.0.7","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.7","_shasum":"13b969c593c453b6af2b868c27074928bbcf4e44","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.7","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.7","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"13b969c593c453b6af2b868c27074928bbcf4e44","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.7.tgz"},"directories":{}},"0.0.8":{"name":"ssh2-streams","version":"0.0.8","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.8","_shasum":"c99e84156944376f1900b8ac53cb652a49fb7adc","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.8","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.8","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"c99e84156944376f1900b8ac53cb652a49fb7adc","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.8.tgz"},"directories":{}},"0.0.9":{"name":"ssh2-streams","version":"0.0.9","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.9","_shasum":"1e44ed3fc66228af6f65cc7e8be4b60c81a28f1c","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.9","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.9","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"1e44ed3fc66228af6f65cc7e8be4b60c81a28f1c","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.9.tgz"},"directories":{}},"0.0.10":{"name":"ssh2-streams","version":"0.0.10","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.10","_shasum":"20ff1209407df6ea4a552b89e5bdef3879c5fb5d","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.10","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.10","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"20ff1209407df6ea4a552b89e5bdef3879c5fb5d","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.10.tgz"},"directories":{}},"0.0.11":{"name":"ssh2-streams","version":"0.0.11","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.11","_shasum":"f406a5a115a1eeef0661acc402905a4266af9821","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.11","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.11","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"f406a5a115a1eeef0661acc402905a4266af9821","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.11.tgz"},"directories":{}},"0.0.12":{"name":"ssh2-streams","version":"0.0.12","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"http://github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams","_id":"ssh2-streams@0.0.12","_shasum":"5078126451ccf071204bfb7dc62f2f8b2bdea60b","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.12","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.12","_npmVersion":"1.4.28","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"5078126451ccf071204bfb7dc62f2f8b2bdea60b","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.12.tgz"},"directories":{}},"0.0.13":{"name":"ssh2-streams","version":"0.0.13","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"git+ssh://git@github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams#readme","_id":"ssh2-streams@0.0.13","_shasum":"5c0478a52d432fbb4389feca8460d1bbdd4d7f93","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.13","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.13","_npmVersion":"2.9.0","_nodeVersion":"0.10.38","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"5c0478a52d432fbb4389feca8460d1bbdd4d7f93","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.13.tgz"},"directories":{}},"0.0.14":{"name":"ssh2-streams","version":"0.0.14","author":{"name":"Brian White","email":"mscdex@mscdex.net"},"description":"SSH2 and SFTP(v3) client/server protocol streams for node.js","main":"./index","engines":{"node":">=0.8.7"},"dependencies":{"readable-stream":"~1.0.0","streamsearch":"~0.1.2","asn1":"~0.2.0","jsbn":"*"},"scripts":{"test":"node test/test.js"},"keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"licenses":[{"type":"MIT","url":"http://github.com/mscdex/ssh2-streams/raw/master/LICENSE"}],"repository":{"type":"git","url":"git+ssh://git@github.com/mscdex/ssh2-streams.git"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"homepage":"https://github.com/mscdex/ssh2-streams#readme","_id":"ssh2-streams@0.0.14","_shasum":"b7d80c73173ea3b8d511e6252da54f7792a04779","_resolved":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.14","_from":"https://github.com/mscdex/ssh2-streams/tarball/v0.0.14","_npmVersion":"2.9.0","_nodeVersion":"0.10.38","_npmUser":{"name":"mscdex","email":"mscdex@mscdex.net"},"maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"dist":{"shasum":"b7d80c73173ea3b8d511e6252da54f7792a04779","tarball":"http://registry.npmjs.org/ssh2-streams/-/ssh2-streams-0.0.14.tgz"},"directories":{}}},"readme":"Description\n===========\n\nSSH2 and SFTP(v3) client/server protocol streams for [node.js](http://nodejs.org/).\n\n\nRequirements\n============\n\n* [node.js](http://nodejs.org/) -- v0.8.7 or newer\n\n\nInstall\n=======\n\n    npm install ssh2-streams\n\n\nAPI\n===\n\n`require('ssh2').SSH2Stream` returns an **_SSH2Stream_** constructor.\n\n`require('ssh2').SFTPStream` returns an [**_SFTPStream_**](SFTPStream.md) constructor.\n\n`require('ssh2').utils` returns an _object_ of useful utility functions.\n\n`require('ssh2').constants` returns an _object_ containing useful SSH protocol constants.\n\n\nSSH2Stream events\n-----------------\n\n**Client/Server events**\n\n* **header**(< _object_ >headerInfo) - Emitted when the protocol header is seen. `headerInfo` contains:\n\n    * **greeting** - _string_ - (Client-only) An optional greeting message presented by the server.\n\n    * **identRaw** - _string_ - The raw identification string sent by the remote party.\n\n    * **versions** - _object_ - Contains various information parsed from `identRaw`:\n\n        * **protocol** - _string_ - The protocol version (always `1.99` or `2.0`) supported by the remote party.\n\n        * **software** - _string_ - The software name used by the remote party.\n\n    * **comments** - _string_ - Any additional text that comes after the software name.\n\n* **GLOBAL_REQUEST**(< _string_ >reqName, < _boolean_ >wantReply, < _mixed_ >reqData)\n\n* **CHANNEL_DATA:\\<channel\\>**(< _Buffer_ >data)\n\n* **CHANNEL_EXTENDED_DATA:\\<channel\\>**(< _integer_ >type, < _Buffer_ >data)\n\n* **CHANNEL_WINDOW_ADJUST:\\<channel\\>**(< _integer_ >bytesToAdd)\n\n* **CHANNEL_SUCCESS:\\<channel\\>**()\n\n* **CHANNEL_FAILURE:\\<channel\\>**()\n\n* **CHANNEL_EOF:\\<channel\\>**()\n\n* **CHANNEL_CLOSE:\\<channel\\>**()\n\n* **CHANNEL_OPEN_CONFIRMATION:\\<channel\\>**(< _object_ >channelInfo) - `channelInfo` contains:\n\n    * **recipient** - _integer_ - The local channel number.\n\n    * **sender** - _integer_ - The remote party's channel number.\n\n    * **window** - _integer_ - The initial window size for the channel.\n\n    * **packetSize** - _integer_ - The maximum packet size for the channel.\n\n* **CHANNEL_OPEN_FAILURE:\\<channel\\>**(< _object_ >failInfo) - `failInfo` contains:\n\n    * **recipient** - _integer_ - The local channel number.\n\n    * **reasonCode** - _integer_ - The reason code of the failure.\n\n    * **reason** - _string_ - A text representation of the `reasonCode`.\n\n    * **description** - _string_ - An optional description of the failure.\n\n* **DISCONNECT**(< _string_ >reason, < _integer_ >reasonCode, < _string_ >description)\n\n* **DEBUG**(< _string_ >message)\n\n* **NEWKEYS**()\n\n* **REQUEST_SUCCESS**([< _Buffer_ >resData])\n\n* **REQUEST_FAILURE**()\n\n\n\n**Client-only events**\n\n* **fingerprint**(< _Buffer_ >hostKey, < _function_ >callback) - This event allows you to (synchronously) verify a host's key. If `callback` is called with any value other than `undefined` or `true`, a disconnection will occur. The default behavior is to auto-allow any host key.\n\n* **SERVICE_ACCEPT**(< _string_ >serviceName)\n\n* **USERAUTH_PASSWD_CHANGEREQ**(< _string_ >message)\n\n* **USERAUTH_INFO_REQUEST**(< _string_ >name, < _string_ >instructions, < _string_ >lang, < _array_ >prompts)\n\n* **USERAUTH_PK_OK**()\n\n* **USERAUTH_SUCCESS**()\n\n* **USERAUTH_FAILURE**(< _array_ >methodsContinue, < _boolean_ >partialSuccess)\n\n* **USERAUTH_BANNER**(< _string_ >message)\n\n* **CHANNEL_OPEN**(< _object_ >channelInfo) - `channelInfo` contains:\n\n    * **type** - _string_ - The channel type (e.g. `x11`, `forwarded-tcpip`).\n\n    * **sender** - _integer_ - The remote party's channel number.\n\n    * **window** - _integer_ - The initial window size for the channel.\n\n    * **packetSize** - _integer_ - The maximum packet size for the channel.\n\n    * **data** - _object_ - The properties available depend on `type`:\n\n        * `x11`:\n\n            * **srcIP** - _string_ - Source IP address of X11 connection request.\n\n            * **srcPort** - _string_ - Source port of X11 connection request.\n\n        * `forwarded-tcpip`:\n\n            * **srcIP** - _string_ - Source IP address of incoming connection.\n\n            * **srcPort** - _string_ - Source port of incoming connection.\n\n            * **destIP** - _string_ - Destination IP address of incoming connection.\n\n            * **destPort** - _string_ - Destination port of incoming connection.\n\n        * `forwarded-streamlocal@openssh.com`:\n\n            * **socketPath** - _string_ - Source socket path of incoming connection.\n\n        * `auth-agent@openssh.com` has no extra data.\n\n* **CHANNEL_REQUEST:\\<channel\\>**(< _object_ >reqInfo) - `reqInfo` properties depend on `reqInfo.request`:\n\n    * `exit-status`:\n\n        * **code** - _integer_ - The exit status code of the remote process.\n\n    * `exit-signal`:\n\n        * **signal** - _string_ - The signal name.\n\n        * **coredump** - _boolean_ - Was the exit the result of a core dump?\n\n        * **description** - _string_ - An optional error message.\n\n\n\n**Server-only events**\n\n* **SERVICE_REQUEST**(< _string_ >serviceName)\n\n* **USERAUTH_REQUEST**(< _string_ >username, < _string_ >serviceName, < _string_ >authMethod, < _mixed_ >authMethodData) - `authMethodData` depends on `authMethod`:\n\n    * For `password`, it's a _string_ containing the password.\n\n    * For `publickey`, it's an _object_ containing:\n\n        * **keyAlgo** - _string_ - The public key algorithm.\n\n        * **key** - _Buffer_ - The public key data.\n\n        * **signature** - _mixed_ - If set, it is a _Buffer_ containing the signature to be verified.\n\n        * **blob** - _mixed_ - If set, it is a _Buffer_ containing the data to sign. The resulting signature is what is compared to `signature`.\n\n    * For `hostbased`, it's an _object_ including the properties from `publickey` but also:\n\n        * **localHostname** - _string_ - The client's hostname to be verified.\n\n        * **localUsername** - _string_ - The client's (local) username to be verified.\n\n* **USERAUTH_INFO_RESPONSE**(< _array_ >responses)\n        \n* **GLOBAL_REQUEST**(< _string_ >reqName, < _boolean_ >wantReply, < _mixed_ >reqData) - `reqData` depends on `reqName`:\n\n    * For `tcpip-forward`/`cancel-tcpip-forward`, it's an _object_ containing:\n\n        * **bindAddr** - _string_ - The IP address to start/stop binding to.\n\n        * **bindPort** - _string_ - The port to start/stop binding to.\n\n    * For `streamlocal-forward@openssh.com`/`cancel-streamlocal-forward@openssh.com`, it's an _object_ containing:\n\n        * **socketPath** - _string_ - The socket path to start/stop listening on.\n\n    * For `no-more-sessions@openssh.com`, there is no `reqData`.\n\n    * For any other requests, it's a _Buffer_ containing raw request-specific data *if* there is any extra data.\n\n* **CHANNEL_OPEN**(< _object_ >channelInfo) - `channelInfo` contains:\n\n    * **type** - _string_ - The channel type (e.g. `session`, `direct-tcpip`).\n\n    * **sender** - _integer_ - The remote party's channel number.\n\n    * **window** - _integer_ - The initial window size for the channel.\n\n    * **packetSize** - _integer_ - The maximum packet size for the channel.\n\n    * **data** - _object_ - The properties available depend on `type`:\n\n        * `direct-tcpip`:\n\n            * **srcIP** - _string_ - Source IP address of outgoing connection.\n\n            * **srcPort** - _string_ - Source port of outgoing connection.\n\n            * **destIP** - _string_ - Destination IP address of outgoing connection.\n\n            * **destPort** - _string_ - Destination port of outgoing connection.\n\n        * `direct-streamlocal@openssh.com`:\n\n            * **socketPath** - _string_ - Destination socket path of outgoing connection.\n\n        * `session` has no extra data.\n\n* **CHANNEL_REQUEST:\\<channel\\>**(< _object_ >reqInfo) - `reqInfo` properties depend on `reqInfo.request`:\n\n    * `pty-req`:\n\n        * **wantReply** - _boolean_ - The client is requesting a response to this request.\n\n        * **term** - _string_ - The terminal type name.\n\n        * **cols** - _integer_ - The number of columns.\n\n        * **rows** - _integer_ - The number of rows.\n\n        * **width** - _integer_ - The width in pixels.\n\n        * **height** - _integer_ - The height in pixels.\n\n        * **modes** - _object_ - The terminal modes.\n\n    * `window-change`:\n\n        * **cols** - _integer_ - The number of columns.\n\n        * **rows** - _integer_ - The number of rows.\n\n        * **width** - _integer_ - The width in pixels.\n\n        * **height** - _integer_ - The height in pixels.\n\n    * `x11-req`:\n\n        * **wantReply** - _boolean_ - The client is requesting a response to this request.\n\n        * **single** - _boolean_ - Whether only a single X11 connection should be allowed.\n\n        * **protocol** - _string_ - The X11 authentication protocol to be used.\n\n        * **cookie** - _string_ - The hex-encoded X11 authentication cookie.\n\n        * **screen** - _integer_ - The screen number for incoming X11 connections.\n\n    * `env`:\n\n        * **wantReply** - _boolean_ - The client is requesting a response to this request.\n\n        * **key** - _string_ - The environment variable name.\n\n        * **val** - _string_ - The environment variable value.\n\n    * `shell`:\n\n        * **wantReply** - _boolean_ - The client is requesting a response to this request.\n\n    * `exec`:\n\n        * **wantReply** - _boolean_ - The client is requesting a response to this request.\n\n        * **command** - _string_ - The command to be executed.\n\n    * `subsystem`:\n\n        * **wantReply** - _boolean_ - The client is requesting a response to this request.\n\n        * **subsystem** - _string_ - The name of the subsystem.\n\n    * `signal`:\n\n        * **signal** - _string_ - The signal name (prefixed with `SIG`).\n\n    * `xon-xoff`:\n\n        * **clientControl** - _boolean_ - Client can/can't perform flow control (control-S/control-Q processing).\n\n    * `auth-agent-req@openssh.com` has no `reqInfo`.\n\nSSH2Stream properties\n---------------------\n\n* **bytesSent** - _integer_ - The number of bytes sent since the last keying. This metric can be useful in determining when to call `rekey()`.\n\n* **bytesReceived** - _integer_ - The number of bytes received since the last keying. This metric can be useful in determining when to call `rekey()`.\n\n\nSSH2Stream methods\n------------------\n\n* **(constructor)**(< _object_ >config) - Creates and returns a new SSH2Stream instance. SSH2Stream instances are Duplex streams. `config` can contain:\n\n    * **server** - _boolean_ - Set to `true` to create an instance in server mode. **Default:** `false`\n\n    * **privateKey** - _mixed_ - If in server mode, a _Buffer_ or _string_ that contains the **required** host private key (OpenSSH format). **Default:** (none)\n\n    * **passphrase** - _string_ - For an encrypted host private key, this is the passphrase used to decrypt it. **Default:** (none)\n\n    * **banner** - _string_ - If in server mode, an optional message to send to the user immediately upon connection, before the handshake. **Default:** (none)\n\n    * **ident** - _string_ - A custom software name/version identifier. **Default:** `'ssh2js' + moduleVersion + 'srv'` (server mode) `'ssh2js' + moduleVersion` (client mode)\n\n    * **maxPacketSize** - _string_ - This is the maximum packet size that will be accepted. It should be 35000 bytes or larger to be compatible with other SSH2 implementations. **Default:** `35000`\n\n    * **highWaterMark** - _integer_ - This is the `highWaterMark` to use for the stream. **Default:** `32 * 1024`\n\n    * **debug** - _function_ - Set this to a function that receives a single string argument to get detailed (local) debug information. **Default:** (none)\n\n\n\n**Client/Server methods**\n\n* **ping**() - _boolean_ - Writes a dummy GLOBAL_REQUEST packet (specifically \"keepalive@openssh.com\") that requests a reply. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **disconnect**([< _integer_ >reasonCode]) - _boolean_ - Writes a disconnect packet and closes the stream. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **rekey**() - _boolean_ - Starts the re-keying process. Incoming/Outgoing packets are buffered until the re-keying process has finished. Returns `false` to indicate that no more packets should be written until the `NEWKEYS` event is seen.\n\n* **requestSuccess**([< _Buffer_ >data]) - _boolean_ - Writes a request success packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **requestFailure**() - _boolean_ - Writes a request failure packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelSuccess**() - _boolean_ - Writes a channel success packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelFailure**() - _boolean_ - Writes a channel failure packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelEOF**(< _integer_ >channel) - _boolean_ - Writes a channel EOF packet for the given `channel`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelClose**(< _integer_ >channel) - _boolean_ - Writes a channel close packet for the given `channel`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelWindowAdjust**(< _integer_ >channel, < _integer_ >amount) - _boolean_ - Writes a channel window adjust packet for the given `channel` where `amount` is the number of bytes to add to the channel window. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelData**(< _integer_ >channel, < _mixed_ >data) - _boolean_ - Writes a channel data packet for the given `channel` where `data` is a _Buffer_ or _string_. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelExtData**(< _integer_ >channel, < _mixed_ >data, < _integer_ >type) - _boolean_ - Writes a channel extended data packet for the given `channel` where `data is a _Buffer_ or _string_. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelOpenConfirm**(< _integer_ >remoteChannel, < _integer_ >localChannel, < _integer_ >initWindow, < _integer_ >maxPacket) - _boolean_ - Writes a channel open confirmation packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **channelOpenFail**(< _integer_ >remoteChannel, < _integer_ >reasonCode[, < _string_ >description]) - _boolean_ - Writes a channel open failure packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n\n\n**Client-only methods**\n\n* **service**(< _string_ >serviceName) - _boolean_ - Writes a service request packet for `serviceName`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **tcpipForward**(< _string_ >bindAddr, < _integer_ >bindPort[, < _boolean_ >wantReply]) - _boolean_ - Writes a tcpip forward global request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **cancelTcpipForward**(< _string_ >bindAddr, < _integer_ >bindPort[, < _boolean_ >wantReply]) - _boolean_ - Writes a cancel tcpip forward global request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authPassword**(< _string_ >username, < _string_ >password) - _boolean_ - Writes a password userauth request packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authPK**(< _string_ >username, < _object_ >pubKey[, < _function_ >cbSign]) - _boolean_ - Writes a publickey userauth request packet. `pubKey` is the object returned from using `utils.parseKey()` on a private or public key. If `cbSign` is not present, a pubkey check userauth packet is written. Otherwise `cbSign` is called with `(blob, callback)`, where `blob` is the data to sign with the private key and the resulting signature _Buffer_ is passed to `callback` as the first argument. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authHostbased**(< _string_ >username, < _object_ >pubKey, < _string_ >localHostname, < _string_ >localUsername, < _function_ >cbSign) - _boolean_ - Writes a hostbased userauth request packet. `pubKey` is the object returned from using `utils.parseKey()` on a private or public key. `cbSign` is called with `(blob, callback)`, where `blob` is the data to sign with the private key and the resulting signature _Buffer_ is passed to `callback` as the first argument. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authKeyboard**(< _string_ >username) - _boolean_ - Writes a keyboard-interactive userauth request packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authNone**(< _string_ >username) - _boolean_ - Writes a \"none\" userauth request packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authInfoRes**(< _array_ >responses) - _boolean_ - Writes a userauth info response packet. `responses` is an _array_ of zero or more strings corresponding to responses to prompts previously sent by the server. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **directTcpip**(< _integer_ >channel, < _integer_ >initWindow, < _integer_ >maxPacket, < _object_ >config) - _boolean_ - Writes a direct tcpip channel open packet. `config` must contain `srcIP`, `srcPort`, `dstIP`, and `dstPort`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **session**(< _integer_ >channel, < _integer_ >initWindow, < _integer_ >maxPacket) - _boolean_ - Writes a session channel open packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **openssh_agentForward**(< _integer_ >channel[, < _boolean_ >wantReply]) - _boolean_ - Writes an `auth-agent-req@openssh.com` channel request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **windowChange**(< _integer_ >channel, < _integer_ >rows, < _integer_ >cols, < _integer_ >height, < _integer_ >width) - _boolean_ - Writes a window change channel request packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **pty**(< _integer_ >channel, < _integer_ >rows, < _integer_ >cols, < _integer_ >height, < _integer_ >width, < _string_ >terminalType, < _mixed_ >terminalModes[, < _boolean_ >wantReply]) - _boolean_ - Writes a pty channel request packet. If `terminalType` is falsey, `vt100` is used. `terminalModes` can be the raw bytes, an _object_ of the terminal modes to set, or a falsey value for no modes. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **env**(< _integer_ >channel, < _string_ >key, < _mixed_ >value[, < _boolean_ >wantReply]) - _boolean_ - Writes an env channel request packet. `value` can be a _string_ or _Buffer_. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **shell**(< _integer_ >channel[, < _boolean_ >wantReply]) - _boolean_ - Writes a shell channel request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **exec**(< _integer_ >channel, < _string_ >command[, < _boolean_ >wantReply]) - _boolean_ - Writes an exec channel request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **signal**(< _integer_ >channel, < _string_ >signalName) - _boolean_ - Writes a signal channel request packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **x11Forward**(< _integer_ >channel, < _object_ >config[, < _boolean_ >wantReply]) - _boolean_ - Writes an X11 forward channel request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic. `config` can contain:\n\n    * **single** - _boolean_ - `true` if only a single connection should be forwarded.\n\n    * **protocol** - _string_ - The name of the X11 authentication method used (e.g. `MIT-MAGIC-COOKIE-1`).\n\n    * **cookie** - _string_ - The X11 authentication cookie encoded in hexadecimal.\n\n    * **screen** - _integer_ - The screen number to forward X11 connections for.\n\n* **subsystem**(< _integer_ >channel, < _string_ >name[, < _boolean_ >wantReply]) - _boolean_ - Writes a subsystem channel request packet. `name` is the name of the subsystem (e.g. `sftp` or `netconf`). `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **openssh_noMoreSessions**([< _boolean_ >wantReply]) - _boolean_ - Writes a no-more-sessions@openssh.com request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **openssh_streamLocalForward**(< _string_ >socketPath[, < _boolean_ >wantReply]) - _boolean_ - Writes a streamlocal-forward@openssh.com request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **openssh_cancelStreamLocalForward**(< _string_ >socketPath[, < _boolean_ >wantReply]) - _boolean_ - Writes a cancel-streamlocal-forward@openssh.com request packet. `wantReply` defaults to `true`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **openssh_directStreamLocal**(< _integer_ >channel, < _integer_ >initWindow, < _integer_ >maxPacket, < _object_ >config) - _boolean_ - Writes a direct-streamlocal@openssh.com channel open packet. `config` must contain `socketPath`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n\n\n**Server-only methods**\n\n* **serviceAccept**(< _string_ >serviceName) - _boolean_ - Writes a service accept packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authFailure**([< _array_ >authMethods[, < _boolean_ >partialSuccess]]) - _boolean_ - Writes a userauth failure packet. `authMethods` is an _array_ of authentication methods that can continue. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authSuccess**() - _boolean_ - Writes a userauth success packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authPKOK**(< _string_ >keyAlgorithm, < _Buffer_ >keyData) - _boolean_ - Writes a userauth PK OK packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **authInfoReq**(< _string_ >name, < _string_ >instructions, < _array_ >prompts) - _boolean_ - Writes a userauth info request packet. `prompts` is an array of `{ prompt: 'Prompt text', echo: true }` objects (`prompt` being the prompt text and `echo` indicating whether the client's response to the prompt should be echoed to their display). Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **forwardedTcpip**(< _integer_ >channel, < _integer_ >initWindow, < _integer_ >maxPacket, < _object_ >info) - _boolean_ - Writes a forwarded tcpip channel open packet. `info` must contain `boundAddr`, `boundPort`, `remoteAddr`, and `remotePort`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **x11**(< _integer_ >channel, < _integer_ >initWindow, < _integer_ >maxPacket, < _object_ >info) - _boolean_ - Writes an X11 channel open packet. `info` must contain `originAddr` and `originPort`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **openssh_forwardedStreamLocal**(< _integer_ >channel, < _integer_ >initWindow, < _integer_ >maxPacket, < _object_ >info) - _boolean_ - Writes an forwarded-streamlocal@openssh.com channel open packet. `info` must contain `socketPath`. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **exitStatus**(< _integer_ >channel, < _integer_ >exitCode) - _boolean_ - Writes an exit status channel request packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n* **exitSignal**(< _integer_ >channel, < _string_ >signalName, < _boolean_ >coreDumped, < _string_ >errorMessage) - _boolean_ - Writes an exit signal channel request packet. Returns `false` if you should wait for the `continue` event before sending any more traffic.\n\n\nUtility methods\n---------------\n\n* **parseKey**(< _mixed_ >keyData) - _object_ - Parses a private/public key in OpenSSH and RFC4716 formats.\n\n* **decryptKey**(< _object_ >privKeyInfo, < _string_ >passphrase) - _(void)_ - Takes a private key parsed with `parseKey()` and decrypts it with `passphrase`. The decrypted key data overwrites the original encrypted copy.\n\n* **genPublicKey**(< _object_ >privKeyInfo) - _object_ - Takes a private key parsed with `parseKey()` and generates the associated public key and returns the public key information in the same format as `parseKey()`.\n","maintainers":[{"name":"mscdex","email":"mscdex@mscdex.net"}],"time":{"modified":"2015-06-09T16:09:27.424Z","created":"2015-01-25T15:38:25.393Z","0.0.1":"2015-01-25T15:38:25.393Z","0.0.2":"2015-02-01T04:11:45.758Z","0.0.3":"2015-02-01T21:37:47.427Z","0.0.4":"2015-02-01T23:00:08.058Z","0.0.5":"2015-02-08T13:40:23.727Z","0.0.6":"2015-02-10T05:23:15.673Z","0.0.7":"2015-03-15T20:16:16.386Z","0.0.8":"2015-03-24T14:25:47.140Z","0.0.9":"2015-04-01T02:30:17.509Z","0.0.10":"2015-04-29T15:44:44.674Z","0.0.11":"2015-04-30T05:59:04.897Z","0.0.12":"2015-05-01T20:56:24.079Z","0.0.13":"2015-05-11T16:06:11.216Z","0.0.14":"2015-06-09T16:09:27.424Z"},"homepage":"https://github.com/mscdex/ssh2-streams#readme","keywords":["ssh","ssh2","sftp","secure","protocol","streams","client","server"],"repository":{"type":"git","url":"git+ssh://git@github.com/mscdex/ssh2-streams.git"},"author":{"name":"Brian White","email":"mscdex@mscdex.net"},"bugs":{"url":"https://github.com/mscdex/ssh2-streams/issues"},"readmeFilename":"README.md","users":{"crees!":true,"shanewholloway":true,"moimikey":true},"_attachments":{},"_etag":"\"3ARYZVP0FT0XUMTX0771JV10G\""}
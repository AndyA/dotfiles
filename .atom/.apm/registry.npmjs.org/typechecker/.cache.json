{"_id":"typechecker","_rev":"23-d70a59435410e05f7c4af680e6f24c9d","name":"typechecker","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","dist-tags":{"latest":"2.0.8"},"versions":{"2.0.0":{"name":"typechecker","version":"2.0.0","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","keywords":["javascript","flow","control","async","sync","tasks","batch","utility","util","utilities","paths","path","events","event","module","modules","compare","comparison","html"],"author":{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"http://balupton.com"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"},{"name":"Sean Fridman","email":"fridman@mail.sfsu.edu","url":"https://github.com/sfrdmn"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.1.2","chai":"~1.5.0"},"directories":{"lib":"./out/lib"},"scripts":{"test":"node ./out/test/typechecker-test.js --joe-reporter=list"},"main":"./out/lib/balutil","readme":"# TypeChecker [![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker)\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save typechecker`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org/)\n\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)\n```\n\n### Available Methods\n\n- `getObjectType` (e.g. `[object RegExp]`)\n- `getType` (e.g. `regexp`)\n- `isPlainObject` (checks for no custom prototype)\n- `isError`\n- `isDate`\n- `isArguments`\n- `isFunction`\n- `isRegExp`\n- `isArray`\n- `isNumber`\n- `isString`\n- `isBoolean`\n- `isNull`\n- `isUndefined`\n- `isEmpty` (checks for `null` or `undefined`)\n- `isEmptyObject` (checks for no keys that are its own)\n\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me) <us@bevry.me>\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n","readmeFilename":"README.md","_id":"typechecker@2.0.0","dist":{"shasum":"5aac841556cc1ef0c3a717e2e9d14bd0789e66bd","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.0.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"balupton","email":"b@lupton.cc"}},"2.0.1":{"name":"typechecker","version":"2.0.1","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","keywords":["types","type"],"author":{"name":"Bevry Pty Ltd","email":"us@bevry.me","url":"http://bevry.me"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.1.2","chai":"~1.5.0"},"directories":{"lib":"./out/lib"},"scripts":{"test":"node ./out/test/typechecker-test.js --joe-reporter=list"},"main":"./out/lib/typechecker.js","readme":"# TypeChecker [![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker)\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save typechecker`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org/)\n\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)\n```\n\n### Available Methods\n\n- `getObjectType` (e.g. `[object RegExp]`)\n- `getType` (e.g. `regexp`)\n- `isPlainObject` (checks for no custom prototype)\n- `isError`\n- `isDate`\n- `isArguments`\n- `isFunction`\n- `isRegExp`\n- `isArray`\n- `isNumber`\n- `isString`\n- `isBoolean`\n- `isNull`\n- `isUndefined`\n- `isEmpty` (checks for `null` or `undefined`)\n- `isEmptyObject` (checks for no keys that are its own)\n\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n","readmeFilename":"README.md","_id":"typechecker@2.0.1","dist":{"shasum":"e18e99be60762c01bde38ef02f9a067ed887c454","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.1.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"balupton","email":"b@lupton.cc"}},"2.0.2":{"name":"typechecker","version":"2.0.2","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","keywords":["types","type","check","gettype","isstring","isregexp","isregex","isplainobject","isobject","iserror","isnumber","isdate","isarguments","isarray","isnull","isempty","isundefined","isemptyobject"],"author":{"name":"Bevry Pty Ltd","email":"us@bevry.me","url":"http://bevry.me"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.3.0","joe-reporter-console":"~1.2.1"},"directories":{"lib":"./out/lib"},"scripts":{"prepublish":"npm install typechecker@latest","test":"node ./out/test/everything-test.js"},"main":"./out/lib/typechecker.js","readme":"# TypeChecker\n\n[![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker)\n[![NPM version](https://badge.fury.io/js/typechecker.png)](https://npmjs.org/package/typechecker)\n[![Flattr this project](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr)\n\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save typechecker`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org/)\n\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)  // returns true\n```\n\n### Methods\n\n- `getObjectType` - returns the object string of the value, e.g. when passed `/^a/` it'll return `\"[object RegExp]\"`\n- `getType` - returns lower case string of the type, e.g. when passed `/^a/` it'll return `\"regex\"`\n- `isPlainObject` - returns `true` if the value doesn't have a custom prototype\n- `isError` - returns `true` if the value an error, otherwise `false`\n- `isDate` - returns `true` if the value is a date, otherwise `false`\n- `isArguments` - returns `true` if the value is function arguments, otherwise `false`\n- `isFunction` - returns `true` if the value is a function, otherwise `false`\n- `isRegExp` - returns `true` if the value is a regular expression instance, otherwise `false`\n- `isArray` - returns `true` if the value is an array, otherwise `false`\n- `isNumber` - returns `true` if the value is a number (`\"2\"` is a string), otherwise `false`\n- `isString` - returns `true` if the value is a string, otherwise `false`\n- `isBoolean` - returns `true` if the value is a boolean, otherwise `false`\n- `isNull` - returns `true` if the value is null, otherwise `false`\n- `isUndefined` - returns `true` if the value is undefined, otherwise `false`\n- `isEmpty` - returns `true` if the value is `null` or `undefined`\n- `isEmptyObject` - returns `true` if the object has no keys that are its own\n\n\n### Notes\n\nWhy should I use this instead of say `instanceof`? Under certain circumstances `instanceof` may not return the correct results.\nThis occurs with [node's vm module](http://nodejs.org/api/vm.html#vm_globals) especially, and circumstances where an object's prototype has been dereferenced from the original.\nAs such, for basic `==` and `===` checks (like `a === null`), you're fine not using this, but for checks when you would have done `instanceof` (like `err instanceof Error`), you should try to use this instead.\nPlus things like `isEmptyObject` and `isPlainObject` are darn useful!\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n","readmeFilename":"README.md","_id":"typechecker@2.0.2","dist":{"shasum":"96b31d8833d5af47b2027e1d164a00c68f161c39","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"balupton","email":"b@lupton.cc"}},"2.0.3":{"name":"typechecker","version":"2.0.3","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","keywords":["types","type","check","gettype","isstring","isregexp","isregex","isplainobject","isobject","iserror","isnumber","isdate","isarguments","isarray","isnull","isempty","isundefined","isemptyobject"],"author":{"name":"Bevry Pty Ltd","email":"us@bevry.me","url":"http://bevry.me"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.3.0","joe-reporter-console":"~1.2.1"},"directories":{"lib":"./out/lib"},"scripts":{"preinstall":"node -e \"if(require('fs').existsSync('./.git')){ require('child_process').spawn('npm', ['install','--force',require('./package.json').name], {env:process.env,cwd:process.cwd(),stdio:'inherit'}); }\"","test":"node ./out/test/everything-test.js"},"main":"./out/lib/typechecker.js","readme":"# TypeChecker\n\n[![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker)\n[![NPM version](https://badge.fury.io/js/typechecker.png)](https://npmjs.org/package/typechecker)\n[![Flattr this project](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr)\n\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save typechecker`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org/)\n\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)  // returns true\n```\n\n### Methods\n\n- `getObjectType` - returns the object string of the value, e.g. when passed `/^a/` it'll return `\"[object RegExp]\"`\n- `getType` - returns lower case string of the type, e.g. when passed `/^a/` it'll return `\"regex\"`\n- `isPlainObject` - returns `true` if the value doesn't have a custom prototype\n- `isError` - returns `true` if the value an error, otherwise `false`\n- `isDate` - returns `true` if the value is a date, otherwise `false`\n- `isArguments` - returns `true` if the value is function arguments, otherwise `false`\n- `isFunction` - returns `true` if the value is a function, otherwise `false`\n- `isRegExp` - returns `true` if the value is a regular expression instance, otherwise `false`\n- `isArray` - returns `true` if the value is an array, otherwise `false`\n- `isNumber` - returns `true` if the value is a number (`\"2\"` is a string), otherwise `false`\n- `isString` - returns `true` if the value is a string, otherwise `false`\n- `isBoolean` - returns `true` if the value is a boolean, otherwise `false`\n- `isNull` - returns `true` if the value is null, otherwise `false`\n- `isUndefined` - returns `true` if the value is undefined, otherwise `false`\n- `isEmpty` - returns `true` if the value is `null` or `undefined`\n- `isEmptyObject` - returns `true` if the object has no keys that are its own\n\n\n### Notes\n\nWhy should I use this instead of say `instanceof`? Under certain circumstances `instanceof` may not return the correct results.\nThis occurs with [node's vm module](http://nodejs.org/api/vm.html#vm_globals) especially, and circumstances where an object's prototype has been dereferenced from the original.\nAs such, for basic `==` and `===` checks (like `a === null`), you're fine not using this, but for checks when you would have done `instanceof` (like `err instanceof Error`), you should try to use this instead.\nPlus things like `isEmptyObject` and `isPlainObject` are darn useful!\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n","readmeFilename":"README.md","_id":"typechecker@2.0.3","dist":{"shasum":"c1460c2c4c621acc0ba9bb7369d1671dbd5df51e","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.3.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"balupton","email":"b@lupton.cc"}},"2.0.4":{"name":"typechecker","version":"2.0.4","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","keywords":["types","type","check","gettype","isstring","isregexp","isregex","isplainobject","isobject","iserror","isnumber","isdate","isarguments","isarray","isnull","isempty","isundefined","isemptyobject"],"author":{"name":"Bevry Pty Ltd","email":"us@bevry.me","url":"http://bevry.me"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.3.0","joe-reporter-console":"~1.2.1"},"directories":{"lib":"./out/lib"},"scripts":{"preinstall":"node ./cyclic.js","test":"node ./out/test/everything-test.js"},"main":"./index.js","readme":"# TypeChecker\n\n[![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker \"Check this project's build status on TravisCI\")\n[![NPM version](https://badge.fury.io/js/typechecker.png)](https://npmjs.org/package/typechecker \"View this project on NPM\")\n[![Gittip donate button](http://badgr.co/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n## Install\n\n### [Node](http://nodejs.org/), [Browserify](http://browserify.org/)\n- Use: `require('typechecker')`\n- Install: 'npm install --save typechecker'\n\n### [Ender](http://ender.jit.su/)\n- Use: `require('typechecker')`\n- Install: `ender add typechecker`\n\n## [Component](http://github.com/component/component)\n- Use: `require('typechecker')`\n- Install: `component install bevry/typechecker`\n\n## [Bower](http://bower.io/)\n- Use: `require('typechecker')`\n- Install: `bower install typechecker`\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)  // returns true\n```\n\n### Methods\n\n- `getObjectType` - returns the object string of the value, e.g. when passed `/^a/` it'll return `\"[object RegExp]\"`\n- `getType` - returns lower case string of the type, e.g. when passed `/^a/` it'll return `\"regex\"`\n- `isPlainObject` - returns `true` if the value doesn't have a custom prototype\n- `isError` - returns `true` if the value an error, otherwise `false`\n- `isDate` - returns `true` if the value is a date, otherwise `false`\n- `isArguments` - returns `true` if the value is function arguments, otherwise `false`\n- `isFunction` - returns `true` if the value is a function, otherwise `false`\n- `isRegExp` - returns `true` if the value is a regular expression instance, otherwise `false`\n- `isArray` - returns `true` if the value is an array, otherwise `false`\n- `isNumber` - returns `true` if the value is a number (`\"2\"` is a string), otherwise `false`\n- `isString` - returns `true` if the value is a string, otherwise `false`\n- `isBoolean` - returns `true` if the value is a boolean, otherwise `false`\n- `isNull` - returns `true` if the value is null, otherwise `false`\n- `isUndefined` - returns `true` if the value is undefined, otherwise `false`\n- `isEmpty` - returns `true` if the value is `null` or `undefined`\n- `isEmptyObject` - returns `true` if the object has no keys that are its own\n\n\n### Notes\n\nWhy should I use this instead of say `instanceof`? Under certain circumstances `instanceof` may not return the correct results.\nThis occurs with [node's vm module](http://nodejs.org/api/vm.html#vm_globals) especially, and circumstances where an object's prototype has been dereferenced from the original.\nAs such, for basic `==` and `===` checks (like `a === null`), you're fine not using this, but for checks when you would have done `instanceof` (like `err instanceof Error`), you should try to use this instead.\nPlus things like `isEmptyObject` and `isPlainObject` are darn useful!\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n","readmeFilename":"README.md","_id":"typechecker@2.0.4","dist":{"shasum":"c09a42086b9e7473263da00f9fac347ea245ac79","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.4.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"balupton","email":"b@lupton.cc"}},"2.0.5":{"name":"typechecker","version":"2.0.5","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","keywords":["types","type","check","gettype","isstring","isregexp","isregex","isplainobject","isobject","iserror","isnumber","isdate","isarguments","isarray","isnull","isempty","isundefined","isemptyobject"],"author":{"name":"Bevry Pty Ltd","email":"us@bevry.me","url":"http://bevry.me"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.3.0","joe-reporter-console":"~1.2.1"},"directories":{"lib":"./out/lib"},"scripts":{"preinstall":"node ./cyclic.js","test":"node ./out/test/everything-test.js"},"main":"./index.js","readme":"# TypeChecker\n\n[![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker \"Check this project's build status on TravisCI\")\n[![NPM version](https://badge.fury.io/js/typechecker.png)](https://npmjs.org/package/typechecker \"View this project on NPM\")\n[![Gittip donate button](http://badgr.co/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n## Install\n\n### [Node](http://nodejs.org/), [Browserify](http://browserify.org/)\n- Use: `require('typechecker')`\n- Install: 'npm install --save typechecker'\n\n### [Ender](http://ender.jit.su/)\n- Use: `require('typechecker')`\n- Install: `ender add typechecker`\n\n## [Component](http://github.com/component/component)\n- Use: `require('typechecker')`\n- Install: `component install bevry/typechecker`\n\n## [Bower](http://bower.io/)\n- Use: `require('typechecker')`\n- Install: `bower install typechecker`\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)  // returns true\n```\n\n### Methods\n\n- `getObjectType` - returns the object string of the value, e.g. when passed `/^a/` it'll return `\"[object RegExp]\"`\n- `getType` - returns lower case string of the type, e.g. when passed `/^a/` it'll return `\"regex\"`\n- `isPlainObject` - returns `true` if the value doesn't have a custom prototype\n- `isError` - returns `true` if the value an error, otherwise `false`\n- `isDate` - returns `true` if the value is a date, otherwise `false`\n- `isArguments` - returns `true` if the value is function arguments, otherwise `false`\n- `isFunction` - returns `true` if the value is a function, otherwise `false`\n- `isRegExp` - returns `true` if the value is a regular expression instance, otherwise `false`\n- `isArray` - returns `true` if the value is an array, otherwise `false`\n- `isNumber` - returns `true` if the value is a number (`\"2\"` is a string), otherwise `false`\n- `isString` - returns `true` if the value is a string, otherwise `false`\n- `isBoolean` - returns `true` if the value is a boolean, otherwise `false`\n- `isNull` - returns `true` if the value is null, otherwise `false`\n- `isUndefined` - returns `true` if the value is undefined, otherwise `false`\n- `isEmpty` - returns `true` if the value is `null` or `undefined`\n- `isEmptyObject` - returns `true` if the object has no keys that are its own\n\n\n### Notes\n\nWhy should I use this instead of say `instanceof`? Under certain circumstances `instanceof` may not return the correct results.\nThis occurs with [node's vm module](http://nodejs.org/api/vm.html#vm_globals) especially, and circumstances where an object's prototype has been dereferenced from the original.\nAs such, for basic `==` and `===` checks (like `a === null`), you're fine not using this, but for checks when you would have done `instanceof` (like `err instanceof Error`), you should try to use this instead.\nPlus things like `isEmptyObject` and `isPlainObject` are darn useful!\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n","readmeFilename":"README.md","_id":"typechecker@2.0.5","dist":{"shasum":"cadb2bf5598336716741f1d726526f0e359a214e","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.5.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"balupton","email":"b@lupton.cc"}},"2.0.6":{"name":"typechecker","version":"2.0.6","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","keywords":["types","type","check","gettype","isstring","isregexp","isregex","isplainobject","isobject","iserror","isnumber","isdate","isarguments","isarray","isnull","isempty","isundefined","isemptyobject"],"author":{"name":"Bevry Pty Ltd","email":"us@bevry.me","url":"http://bevry.me"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.3.0","joe-reporter-console":"~1.2.1"},"directories":{"lib":"./out/lib"},"scripts":{"preinstall":"node ./cyclic.js","test":"node ./out/test/everything-test.js"},"main":"./out/lib/typechecker.js","readme":"# TypeChecker\n\n[![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker \"Check this project's build status on TravisCI\")\n[![NPM version](https://badge.fury.io/js/typechecker.png)](https://npmjs.org/package/typechecker \"View this project on NPM\")\n[![Gittip donate button](http://badgr.co/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n## Install\n\n### [Node](http://nodejs.org/), [Browserify](http://browserify.org/)\n- Use: `require('typechecker')`\n- Install: 'npm install --save typechecker'\n\n### [Ender](http://ender.jit.su/)\n- Use: `require('typechecker')`\n- Install: `ender add typechecker`\n\n## [Component](http://github.com/component/component)\n- Use: `require('typechecker')`\n- Install: `component install bevry/typechecker`\n\n## [Bower](http://bower.io/)\n- Use: `require('typechecker')`\n- Install: `bower install typechecker`\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)  // returns true\n```\n\n### Methods\n\n- `getObjectType` - returns the object string of the value, e.g. when passed `/^a/` it'll return `\"[object RegExp]\"`\n- `getType` - returns lower case string of the type, e.g. when passed `/^a/` it'll return `\"regex\"`\n- `isPlainObject` - returns `true` if the value doesn't have a custom prototype\n- `isError` - returns `true` if the value an error, otherwise `false`\n- `isDate` - returns `true` if the value is a date, otherwise `false`\n- `isArguments` - returns `true` if the value is function arguments, otherwise `false`\n- `isFunction` - returns `true` if the value is a function, otherwise `false`\n- `isRegExp` - returns `true` if the value is a regular expression instance, otherwise `false`\n- `isArray` - returns `true` if the value is an array, otherwise `false`\n- `isNumber` - returns `true` if the value is a number (`\"2\"` is a string), otherwise `false`\n- `isString` - returns `true` if the value is a string, otherwise `false`\n- `isBoolean` - returns `true` if the value is a boolean, otherwise `false`\n- `isNull` - returns `true` if the value is null, otherwise `false`\n- `isUndefined` - returns `true` if the value is undefined, otherwise `false`\n- `isEmpty` - returns `true` if the value is `null` or `undefined`\n- `isEmptyObject` - returns `true` if the object has no keys that are its own\n\n\n### Notes\n\nWhy should I use this instead of say `instanceof`? Under certain circumstances `instanceof` may not return the correct results.\nThis occurs with [node's vm module](http://nodejs.org/api/vm.html#vm_globals) especially, and circumstances where an object's prototype has been dereferenced from the original.\nAs such, for basic `==` and `===` checks (like `a === null`), you're fine not using this, but for checks when you would have done `instanceof` (like `err instanceof Error`), you should try to use this instead.\nPlus things like `isEmptyObject` and `isPlainObject` are darn useful!\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n","readmeFilename":"README.md","_id":"typechecker@2.0.6","dist":{"shasum":"f9dc9a161d05957c5e8225b7470261e16a8409cb","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.6.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"balupton","email":"b@lupton.cc"}},"2.0.7":{"title":"TypeChecker","name":"typechecker","version":"2.0.7","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","license":{"type":"MIT"},"badges":{"travis":true,"npm":true,"gittip":"bevry","flattr":"344188/balupton-on-Flattr","paypal":"QB8GQPZAH84N6"},"keywords":["types","type","check","gettype","isstring","isregexp","isregex","isplainobject","isobject","iserror","isnumber","isdate","isarguments","isarray","isnull","isempty","isundefined","isemptyobject"],"author":{"name":"Benjamin Lupton","email":"b@lupton.cc"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.3.0","joe-reporter-console":"~1.2.1","projectz":"~0.2.3"},"directories":{"lib":"./out/lib"},"scripts":{"preinstall":"node ./cyclic.js","test":"node ./out/test/typechecker-test.js"},"main":"./out/lib/typechecker.js","readme":"\n<!-- TITLE/ -->\n\n# TypeChecker\n\n<!-- /TITLE -->\n\n\n<!-- BADGES/ -->\n\n[![Build Status](http://img.shields.io/travis-ci/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker \"Check this project's build status on TravisCI\")\n[![NPM version](https://badge.fury.io/js/typechecker.png)](https://npmjs.org/package/typechecker \"View this project on NPM\")\n[![Gittip donate button](http://img.shields.io/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\n<!-- /BADGES -->\n\n\n<!-- DESCRIPTION/ -->\n\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n<!-- /DESCRIPTION -->\n\n\n<!-- INSTALL/ -->\n\n## Install\n\n### [Node](http://nodejs.org/), [Browserify](http://browserify.org/)\n- Use: `require('typechecker')`\n- Install: `npm install --save typechecker`\n\n### [Ender](http://ender.jit.su/)\n- Use: `require('typechecker')`\n- Install: `ender add typechecker`\n\n### [Component](http://github.com/component/component)\n- Use: `require('typechecker')`\n- Install: `component install bevry/typechecker`\n\n### [Bower](http://bower.io/)\n- Use: `require('typechecker')`\n- Install: `bower install typechecker`\n\n<!-- /INSTALL -->\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)  // returns true\n```\n\n### Methods\n\n- `getObjectType` - returns the object string of the value, e.g. when passed `/^a/` it'll return `\"[object RegExp]\"`\n- `getType` - returns lower case string of the type, e.g. when passed `/^a/` it'll return `\"regex\"`\n- `isPlainObject` - returns `true` if the value doesn't have a custom prototype\n- `isError` - returns `true` if the value an error, otherwise `false`\n- `isDate` - returns `true` if the value is a date, otherwise `false`\n- `isArguments` - returns `true` if the value is function arguments, otherwise `false`\n- `isFunction` - returns `true` if the value is a function, otherwise `false`\n- `isRegExp` - returns `true` if the value is a regular expression instance, otherwise `false`\n- `isArray` - returns `true` if the value is an array, otherwise `false`\n- `isNumber` - returns `true` if the value is a number (`\"2\"` is a string), otherwise `false`\n- `isString` - returns `true` if the value is a string, otherwise `false`\n- `isBoolean` - returns `true` if the value is a boolean, otherwise `false`\n- `isNull` - returns `true` if the value is null, otherwise `false`\n- `isUndefined` - returns `true` if the value is undefined, otherwise `false`\n- `isEmpty` - returns `true` if the value is `null` or `undefined`\n- `isEmptyObject` - returns `true` if the object has no keys that are its own\n\n\n### Notes\n\nWhy should I use this instead of say `instanceof`? Under certain circumstances `instanceof` may not return the correct results.\nThis occurs with [node's vm module](http://nodejs.org/api/vm.html#vm_globals) especially, and circumstances where an object's prototype has been dereferenced from the original.\nAs such, for basic `==` and `===` checks (like `a === null`), you're fine not using this, but for checks when you would have done `instanceof` (like `err instanceof Error`), you should try to use this instead.\nPlus things like `isEmptyObject` and `isPlainObject` are darn useful!\n\n\n<!-- HISTORY/ -->\n\n## History\n[Discover the change history by heading on over to the `History.md` file.](https://github.com/bevry/typechecker/blob/master/History.md#files)\n\n<!-- /HISTORY -->\n\n\n<!-- CONTRIBUTE/ -->\n\n## Contribute\n\n[Discover how you can contribute by heading on over to the `Contributing.md` file.](https://github.com/bevry/typechecker/blob/master/Contributing.md#files)\n\n<!-- /CONTRIBUTE -->\n\n\n<!-- BACKERS/ -->\n\n## Backers\n\n### Maintainers\n\nThese amazing people are maintaining this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)\n\n### Sponsors\n\nNo sponsors yet! Will you be the first?\n\n[![Gittip donate button](http://img.shields.io/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\n### Contributors\n\nThese amazing people have contributed code to this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton) - [view contributions](https://github.com/bevry/typechecker/commits?author=balupton)\n\n[Become a contributor!](https://github.com/bevry/typechecker/blob/master/Contributing.md#files)\n\n<!-- /BACKERS -->\n\n\n<!-- LICENSE/ -->\n\n## License\n\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT license](http://creativecommons.org/licenses/MIT/)\n\nCopyright &copy; Benjamin Lupton <b@lupton.cc>\n\n<!-- /LICENSE -->\n\n\n","readmeFilename":"README.md","_id":"typechecker@2.0.7","dist":{"shasum":"26afd068379bb88423ca48ce5cfb854e771643ea","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.7.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"balupton","email":"b@lupton.cc"}},"2.0.8":{"title":"TypeChecker","name":"typechecker","version":"2.0.8","description":"Utilities to get and check variable types (isString, isPlainObject, isRegExp, etc)","homepage":"https://github.com/bevry/typechecker","license":{"type":"MIT"},"badges":{"travis":true,"npm":true,"gittip":"bevry","flattr":"344188/balupton-on-Flattr","paypal":"QB8GQPZAH84N6"},"keywords":["types","type","check","gettype","isstring","isregexp","isregex","isplainobject","isobject","iserror","isnumber","isdate","isarguments","isarray","isnull","isempty","isundefined","isemptyobject"],"author":{"name":"2013+ Bevry Pty Ltd","email":"us@bevry.me","url":"http://bevry.me"},"maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"contributors":[{"name":"Benjamin Lupton","email":"b@lupton.cc","url":"https://github.com/balupton"},{"name":"sfrdmn","url":"https://github.com/sfrdmn"}],"bugs":{"url":"https://github.com/bevry/typechecker/issues"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"engines":{"node":">=0.4"},"dependencies":{},"devDependencies":{"coffee-script":"~1.6.2","joe":"~1.3.0","joe-reporter-console":"~1.2.1","projectz":"~0.2.3"},"directories":{"lib":"./out/lib"},"scripts":{"preinstall":"node ./cyclic.js","test":"node ./out/test/typechecker-test.js"},"main":"./out/lib/typechecker.js","readme":"\n<!-- TITLE/ -->\n\n# TypeChecker\n\n<!-- /TITLE -->\n\n\n<!-- BADGES/ -->\n\n[![Build Status](http://img.shields.io/travis-ci/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker \"Check this project's build status on TravisCI\")\n[![NPM version](https://badge.fury.io/js/typechecker.png)](https://npmjs.org/package/typechecker \"View this project on NPM\")\n[![Gittip donate button](http://img.shields.io/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\n<!-- /BADGES -->\n\n\n<!-- DESCRIPTION/ -->\n\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n<!-- /DESCRIPTION -->\n\n\n<!-- INSTALL/ -->\n\n## Install\n\n### [Node](http://nodejs.org/), [Browserify](http://browserify.org/)\n- Use: `require('typechecker')`\n- Install: `npm install --save typechecker`\n\n### [Ender](http://ender.jit.su/)\n- Use: `require('typechecker')`\n- Install: `ender add typechecker`\n\n<!-- /INSTALL -->\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)  // returns true\n```\n\n### Methods\n\n- `getObjectType` - returns the object string of the value, e.g. when passed `/^a/` it'll return `\"[object RegExp]\"`\n- `getType` - returns lower case string of the type, e.g. when passed `/^a/` it'll return `\"regex\"`\n- `isPlainObject` - returns `true` if the value doesn't have a custom prototype\n- `isError` - returns `true` if the value an error, otherwise `false`\n- `isDate` - returns `true` if the value is a date, otherwise `false`\n- `isArguments` - returns `true` if the value is function arguments, otherwise `false`\n- `isFunction` - returns `true` if the value is a function, otherwise `false`\n- `isRegExp` - returns `true` if the value is a regular expression instance, otherwise `false`\n- `isArray` - returns `true` if the value is an array, otherwise `false`\n- `isNumber` - returns `true` if the value is a number (`\"2\"` is a string), otherwise `false`\n- `isString` - returns `true` if the value is a string, otherwise `false`\n- `isBoolean` - returns `true` if the value is a boolean, otherwise `false`\n- `isNull` - returns `true` if the value is null, otherwise `false`\n- `isUndefined` - returns `true` if the value is undefined, otherwise `false`\n- `isEmpty` - returns `true` if the value is `null` or `undefined`\n- `isEmptyObject` - returns `true` if the object has no keys that are its own\n\n\n### Notes\n\nWhy should I use this instead of say `instanceof`? Under certain circumstances `instanceof` may not return the correct results.\nThis occurs with [node's vm module](http://nodejs.org/api/vm.html#vm_globals) especially, and circumstances where an object's prototype has been dereferenced from the original.\nAs such, for basic `==` and `===` checks (like `a === null`), you're fine not using this, but for checks when you would have done `instanceof` (like `err instanceof Error`), you should try to use this instead.\nPlus things like `isEmptyObject` and `isPlainObject` are darn useful!\n\n\n<!-- HISTORY/ -->\n\n## History\n[Discover the change history by heading on over to the `History.md` file.](https://github.com/bevry/typechecker/blob/master/History.md#files)\n\n<!-- /HISTORY -->\n\n\n<!-- CONTRIBUTE/ -->\n\n## Contribute\n\n[Discover how you can contribute by heading on over to the `Contributing.md` file.](https://github.com/bevry/typechecker/blob/master/Contributing.md#files)\n\n<!-- /CONTRIBUTE -->\n\n\n<!-- BACKERS/ -->\n\n## Backers\n\n### Maintainers\n\nThese amazing people are maintaining this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)\n\n### Sponsors\n\nNo sponsors yet! Will you be the first?\n\n[![Gittip donate button](http://img.shields.io/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\n### Contributors\n\nThese amazing people have contributed code to this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton) - [view contributions](https://github.com/bevry/typechecker/commits?author=balupton)\n- sfrdmn (https://github.com/sfrdmn) - [view contributions](https://github.com/bevry/typechecker/commits?author=sfrdmn)\n\n[Become a contributor!](https://github.com/bevry/typechecker/blob/master/Contributing.md#files)\n\n<!-- /BACKERS -->\n\n\n<!-- LICENSE/ -->\n\n## License\n\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT license](http://creativecommons.org/licenses/MIT/)\n\nCopyright &copy; 2013+ Bevry Pty Ltd <us@bevry.me> (http://bevry.me)\n<br/>Copyright &copy; 2011-2012 Benjamin Lupton <b@lupton.cc> (http://balupton.com)\n\n<!-- /LICENSE -->\n\n\n","readmeFilename":"README.md","_id":"typechecker@2.0.8","dist":{"shasum":"e83da84bb64c584ccb345838576c40b0337db82e","tarball":"http://registry.npmjs.org/typechecker/-/typechecker-2.0.8.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"balupton","email":"b@lupton.cc"}}},"readme":"# TypeChecker [![Build Status](https://secure.travis-ci.org/bevry/typechecker.png?branch=master)](http://travis-ci.org/bevry/typechecker)\nUtilities to get and check variable types (isString, isPlainObject, isRegExp, etc)\n\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save typechecker`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org/)\n\n\n\n## Usage\n\n### Example\n\n``` javascript\nrequire('typechecker').isRegExp(/^a/)\n```\n\n### Available Methods\n\n- `getObjectType` (e.g. `[object RegExp]`)\n- `getType` (e.g. `regexp`)\n- `isPlainObject` (checks for no custom prototype)\n- `isError`\n- `isDate`\n- `isArguments`\n- `isFunction`\n- `isRegExp`\n- `isArray`\n- `isNumber`\n- `isString`\n- `isBoolean`\n- `isNull`\n- `isUndefined`\n- `isEmpty` (checks for `null` or `undefined`)\n- `isEmptyObject` (checks for no keys that are its own)\n\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/typechecker/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me) <us@bevry.me>\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n","maintainers":[{"name":"balupton","email":"b@lupton.cc"}],"time":{"modified":"2013-11-01T05:18:51.683Z","created":"2013-03-27T05:45:33.385Z","2.0.0":"2013-03-27T05:45:37.843Z","2.0.1":"2013-03-27T06:20:14.351Z","2.0.2":"2013-09-18T05:13:46.924Z","2.0.3":"2013-09-18T05:28:57.692Z","2.0.4":"2013-09-18T12:36:17.943Z","2.0.5":"2013-09-18T12:42:24.514Z","2.0.6":"2013-09-18T12:57:40.800Z","2.0.7":"2013-10-26T23:32:58.750Z","2.0.8":"2013-11-01T05:18:51.683Z"},"author":{"name":"2013+ Bevry Pty Ltd","email":"us@bevry.me","url":"http://bevry.me"},"repository":{"type":"git","url":"http://github.com/bevry/typechecker.git"},"_attachments":{},"_etag":"\"228LTGGRJEGA1AWJ1O0F6JWRX\""}
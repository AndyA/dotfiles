{"name":"autocomplete-clang","main":"./lib/autocomplete-clang","version":"0.8.6","description":"autocomplete for C/C++/ObjC using clang","activationCommands":[],"repository":{"type":"git","url":"https://github.com/yasuyuky/autocomplete-clang"},"license":"MIT","engines":{"atom":"^1.0.0"},"dependencies":{"clang-flags":"0.2.2"},"providedServices":{"autocomplete.provider":{"versions":{"2.0.0":"provide"}}},"readme":"# autocomplete-clang package\n\nThis package provides completions by [clang](http://clang.llvm.org/)\nlike [emacs auto-complete-clang.el](https://github.com/brianjcj/auto-complete-clang).\n\nusing [autocomplete-plus](https://atom.io/packages/autocomplete-plus)\n\n**for `C`/`C++`/`Objective-C`**\n\n![Screenshot for how autocomplete works](https://raw.githubusercontent.com/yasuyuky/autocomplete-clang/DocumentImage/images/autocomplete-clang.gif)\n\nThis package is currently in an experimental state.\n\n## Requirement\n\n- [autocomplete-plus](https://atom.io/packages/autocomplete-plus)\n- **[clang](http://clang.llvm.org/)**\n\n\n## Features\n\n- Providing completions by clang\n- Auto toggle\n  - default keys `[\".\",\"#\",\"::\",\"->\"]`\n- Using `std` option like `c++11`\n- Using precompile headers for clang\n\n## Using precompiled headers\n\nIt can use precompiled headers for clang. *Optional*\n\nCommand for emitting precompiled header is easily access from menu.\n\n### Emitting pch(precompiled header file),\n\n1. Open `C`/`C++`/`Objective-C` source file on editor buffer.\n2. Choose `Packages` -> `Autocomplete Clang` -> `Emit Precompiled Header`\n3. Then package automatically detect emitted pch file.\n\n![Screenshot of emit-pch](https://raw.githubusercontent.com/yasuyuky/autocomplete-clang/DocumentImage/images/autocomplete-clang-emit-pch.png)\n\n### Notice\n\nIf you change the `std` option after you emitted the pch, you should emit pch again.\n\n\n## Settings\n\n### Global\n\n![Screenshot of configuration](https://raw.githubusercontent.com/yasuyuky/autocomplete-clang/DocumentImage/images/autocomplete-clang-settings.png)\n\n### Project\n\nautocomplete-clang will look for a .clang_complete file as used by vim's [clang_complete](https://github.com/Rip-Rip/clang_complete) plugin, by searching up the directory tree. If it finds one, it'll use this to add parameters passed to clang. Use this for adding project-specific defines or include paths. The format is simply one parameter per line, e.g.\n```\n  -I/opt/qt/5.3/clang_64/lib/QtWebKitWidgets.framework/Versions/5/Headers\n  -I/opt/qt/5.3/clang_64/lib/QtMultimedia.framework/Versions/5/Headers\n  -DSWIFT_EXPERIMENTAL_FT\n```\n\n## Keymaps\n\n### Default keymaps\n\n`ctrl+alt+/`: toggle\n\nAlso you can customize keymaps by editing ~/.atom/keymap.cson\n(choose Open Your Keymap in Atom menu):\n\n```cson\n'.workspace':\n  'ctrl-alt-/': 'autocomplete-clang:toggle'\n  'cmd-ctrl-alt-e': 'autocomplete-clang:emit-pch'\n```\n\nSee Customizing Atom for more details.\n\n## License\n\nMIT (See License file)\n\n## Update problems\n\n    Error message: Module version mismatch.\n\nIf you got a such kind of errors after AtomEditor update, Try following commands.\n\n    cd ~/.atom/package/autocomplete-clang/\n    rm -rf node_modules && apm install\n\n## Misc\n\n- Motivation of the original author is `C++`,\n  So that tests for `C`/`Objective-C` may be not enough.\n\n- Any casual feedbacks to [@yasuyuky](https://twitter.com/yasuyuky) are welcome.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/yasuyuky/autocomplete-clang/issues"},"homepage":"https://github.com/yasuyuky/autocomplete-clang","_id":"autocomplete-clang@0.8.6","_shasum":"8974a1a4f151b021bb083b1eef9c9546b3d9ac10","_resolved":"file:../d-11567-47618-13qd9o1/package.tgz","_from":"../d-11567-47618-13qd9o1/package.tgz"}
// Generated by CoffeeScript 1.7.1
(function() {
  var Directory, File, getClangFlagsCompDB, getClangFlagsDotClangComplete, getFileContents, path, readFileSync, _ref;

  path = require('path');

  readFileSync = require('fs').readFileSync;

  _ref = require('pathwatcher'), File = _ref.File, Directory = _ref.Directory;

  module.exports = {
    getClangFlags: function(fileName) {
      var flags;
      flags = getClangFlagsCompDB(fileName);
      if (flags) {
        getClangFlagsDotClangComplete(fileName);
      }
      return flags;
    },
    activate: function(state) {}
  };

  getFileContents = function(startFile, fileName) {
    var args, contents, error, searchDir, searchFile, searchFilePath, thisDir;
    searchDir = path.dirname(startFile);
    args = [];
    while (searchDir.length) {
      searchFilePath = path.join(searchDir, fileName);
      searchFile = new File(searchFilePath);
      if (searchFile.exists()) {
        contents = "";
        try {
          contents = readFileSync(searchFilePath, 'utf8');
          return contents;
        } catch (_error) {
          error = _error;
          console.log("clang-flags for " + fileName + " couldn't read file " + searchFilePath);
          console.log(error);
        }
        return nil;
      }
      thisDir = new Directory(searchDir);
      if (thisDir.isRoot()) {
        break;
      }
      searchDir = thisDir.getParent().getPath();
    }
    return nil;
  };

  getClangFlagsCompDB = function(fileName) {
    var args, compDB, compDBContents;
    compDBContents = getFileContents(fileName, "compile_commands.json");
    args = 0;
    if (compDBContents.length > 0) {
      compDB = JSON.parse(compDBContents);
    }
    return args;
  };

  getClangFlagsDotClangComplete = function(fileName) {
    var args, clangCompleteContents;
    clangCompleteContents = getFileContents(fileName, ".clang_complete");
    args = [];
    if (clangCompleteContents.length > 0) {
      args = clangCompleteContents.split("\n");
      args = args.concat(["-working-directory=" + searchDir]);
    }
    return args;
  };

}).call(this);
